version: '3.8'

services:
  proxy:
    container_name: proxy
    build: ./traefik/
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik-public-certificates:/certificates"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_SUBDOMAIN_NAME}.${DOMAIN_NAME}`) && (PathPrefix(`/`))"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_DASHBOARD_LOGIN}:${TRAEFIK_DASHBOARD_PASSWORD}"
    networks:
      static-network:
        ipv4_address: 172.22.128.0

  backend:
    container_name: backend
    build: ./django_backend
    restart: always
    ports:
      - 8000
    env_file:
      - .env
    volumes:
      - ./django_backend:/app
    command: gunicorn -w 2 django_backend.wsgi -b 0.0.0.0:8000
    depends_on:
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${SUBDOMAIN_NAME}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
    networks:
      static-network:
        ipv4_address: 172.22.128.1

  db:
    container_name: db
    image: postgres:15.1
    restart: always
    expose:
      - 5432:5432
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      static-network:
        ipv4_address: 172.22.128.2

volumes:
  postgres_data:
    name: postgres_data1
    external: true
  traefik-public-certificates:

networks:
  static-network:
    ipam:
      config:
        - subnet: 172.22.0.0/16
